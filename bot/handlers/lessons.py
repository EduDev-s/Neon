from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.types import BufferedInputFile
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup

import utils
from other.config import config
import requests.users as rq_users
import requests.lessons as rq_lessons
from keyboards.admins import GenDeleteLesson
from handlers.core import GetLessons, GetRouter
from keyboards.users import __HOMEWORK__, GenLesson
from handlers.states.lessons import FormNotificationAdmins
from keyboards.other import __BACK_IN_MAIN_MENU__, GenButtonBack


router = GetRouter()


@router.callback_query(F.data == 'lessons')
async def lessons(callback: CallbackQuery):
    if not (await utils.GetPermissions(callback.message.chat.id)).lessons.use:
        try:
            await utils.RQReporter(c=callback)
        except utils.AccessDeniedError:
            return

    await callback.message.edit_text(text='üëá –í—ã–±–µ—Ä–µ—Ç–µ —É—Ä–æ–∫', reply_markup=__HOMEWORK__)


@router.callback_query(F.data.startswith('lesson:show:'))
async def lesson_show(callback: CallbackQuery, state: FSMContext):
    await state.clear()

    if not (await utils.GetPermissions(callback.message.chat.id)).lessons.use:
        try:
            await utils.RQReporter(c=callback)
        except utils.AccessDeniedError:
            return

    calldata = callback.data.replace('lesson:show:', '')
    lesson = await rq_lessons.GetLesson(callback.message.chat.id, calldata)
    markup = await GenLesson(callback.message.chat.id, calldata, lesson['url'])
    homework = lesson['homework'] if lesson['homework'] is not None else config.NO_FOUND_HOMEWORK_MSG

    # Photo
    if lesson['photo'] is not None:
        photo = BufferedInputFile(file=lesson['photo'], filename='image.png')
        await callback.bot.send_photo(
                chat_id=callback.message.chat.id,
                photo=photo,
                caption=homework,
                reply_markup=markup
            )
    else:
        await callback.message.edit_text(homework, reply_markup=markup)


@router.callback_query(F.data.startswith('lesson:nftadmins:'))
async def lesson_nftadmins_comment(callback: CallbackQuery, state: FSMContext):
    if (await utils.GetPermissions(callback.message.chat.id)).lessons.edit.homework:
        try:
            await utils.RQReporter(c=callback)
        except utils.AccessDeniedError:
            return

    calldata: str = callback.data.replace('lesson:nftadmins:', '')

    try:
        await callback.message.edit_text('‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –Ω—ë–º –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–∞ –æ—à–∏–±–∫—É –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏',
                                         reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                            [GenButtonBack('lesson:show:' + calldata)],
                                            [__BACK_IN_MAIN_MENU__]
                                             ]))
    except TelegramBadRequest:
        await callback.message.answer('‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –Ω—ë–º –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–∞ –æ—à–∏–±–∫—É –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏',
                                      reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                            [GenButtonBack('lesson:show:' + calldata)],
                                            [__BACK_IN_MAIN_MENU__]
                                        ]))

    await state.set_state(FormNotificationAdmins.comment)
    await state.set_data({'lesson_id': calldata})


@router.message(F.text, FormNotificationAdmins.comment)
async def lesson_nftadmins(message: Message, state: FSMContext):
    if (await utils.GetPermissions(message.chat.id)).lessons.edit.homework:
        try:
            await utils.RQReporter(m=message)
        except utils.AccessDeniedError:
            return

    user = await rq_users.GetUser(message.chat.id)

    await utils.NotificationAdmins(
            f'‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user['username']} [{user['user_id']}] —É–≤–µ–¥–æ–º–∏–ª –≤–∞—Å –≤ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–π –ø–æ —É—Ä–æ–∫—É \'{await GetLessons().GetName((await state.get_data())['lesson_id'])}\'\n\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {message.text}',
            message.bot,
            InlineKeyboardMarkup(inline_keyboard=[[__BACK_IN_MAIN_MENU__]])
        )

    await message.answer('‚úÖ –û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ò–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞.',
                         reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                         [GenButtonBack('lessons')],
                                         [__BACK_IN_MAIN_MENU__]
                                     ]))

    await state.clear()


@router.callback_query(F.data.startswith('lesson:delete_warn:'))
async def lesson_delete_warn(callback: CallbackQuery):
    if not (await utils.GetPermissions(callback.message.chat.id)).lessons.edit.homework:
        try:
            await utils.RQReporter(c=callback)
        except utils.AccessDeniedError:
            return

    lesson_id = callback.data.replace('lesson:delete_warn:', '')
    lesson = await rq_lessons.GetLesson(callback.message.chat.id, lesson_id)

    if lesson['homework']:
        StatusHomework = '‚úÖ'
    else:
        StatusHomework = '‚ùå'

    if lesson['photo']:
        StatusPhoto = '‚úÖ'
    else:
        StatusPhoto = '‚ùå'

    if lesson['url']:
        StatusURL = '‚úÖ'
    else:
        StatusURL = '‚ùå'

    try:
        await callback.message.edit_text(f'‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã ?\n\n–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ: {StatusHomework}\n–§–æ—Ç–æ: {StatusPhoto}\nURL: {StatusURL}',
                                         reply_markup=await GenDeleteLesson(lesson_id))
    except TelegramBadRequest:
        await callback.message.answer(f'‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã ?\n\n–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ: {StatusHomework}\n–§–æ—Ç–æ: {StatusPhoto}\nURL: {StatusURL}',
                                      reply_markup=await GenDeleteLesson(lesson_id))


@router.callback_query(F.data.startswith('lesson:delete:'))
async def lesson_delete(callback: CallbackQuery):
    if not (await utils.GetPermissions(callback.message.chat.id)).lessons.edit.homework:
        try:
            await utils.RQReporter(c=callback)
        except utils.AccessDeniedError:
            return

    lesson_id = callback.data.replace('lesson:delete:', '')

    await rq_lessons.UpdateLesson(callback.message.chat.id, lesson_id, None, None, None)

    await callback.message.edit_text('‚úÖ –£—Å–ø–µ—à–Ω–æ !', reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [GenButtonBack(f'lesson:show:{lesson_id}')],
        [__BACK_IN_MAIN_MENU__]
    ]))
