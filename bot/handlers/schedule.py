import aiofiles
from datetime import datetime
from time import strftime, localtime

from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup
from aiogram.types import CallbackQuery, Message
from aiogram.types.input_file import BufferedInputFile

from config import config
import database.requests as rq
from keyboards.users import GenSchedule
from handlers.core import log, GetRouter
from keyboards.other import __BACK_IN_MAIN_MENU__
from handlers.states.update_lesson import FormUpdate
from keyboards.admins import __DELETE_SCHEDULE__, __UPDATE_HOMEWORK_AND_PHOTO__
from utils import CheckForAdmin, RQReporter, NotificationAdmins, newsletter, GetTimeToLesson


router = GetRouter()


@router.callback_query(F.data == 'schedule')
async def schedule(callback: CallbackQuery):
    log.info(str(callback.message.chat.id), msg=f'Received \'[{callback.data}]\'')

    schedule = await rq.GetSchedule(callback.message.chat.id)

    if schedule == FileNotFoundError:
        log.info(user_id=str(callback.message.chat.id), msg='Schedule not found!')
    
        await callback.answer(text='‚ÄºÔ∏è ERROR: FILE NOT FOUND ‚ÄºÔ∏è', show_alert=True)

        await NotificationAdmins(text='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ !', bot=callback.bot,
            reply_markup=InlineKeyboardMarkup(row_width=1, inline_keyboard=[[__BACK_IN_MAIN_MENU__]]))
    else:
        await callback.bot.send_chat_action(callback.message.chat.id, action='upload_photo')
        await callback.bot.send_photo(
                callback.message.chat.id,
                photo=BufferedInputFile(file=schedule.photo, filename='schedule.png'),
                reply_markup=await GenSchedule(callback.message.chat.id)
            )


@router.message(F.photo)
async def schedule_add_from_photo(message: Message, state: FSMContext) -> None:
    if await CheckForAdmin(message.chat.id):
        file = await message.bot.get_file(message.photo[-1].file_id)
        downloaded_file = await message.bot.download_file(file.file_path)

        if message.caption != None:
            await message.answer('üëá –í—ã–±–µ—Ä–µ—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å –î/–ó', reply_markup=__UPDATE_HOMEWORK_AND_PHOTO__)
            await state.set_state(FormUpdate.select_lesson)

            await state.set_data({
                'homework': message.caption,
                'photo': downloaded_file.read()
                })
            
            downloaded_file.close()

        else:
            await rq.UpdateSchedule(message.chat.id, downloaded_file.read())

            await message.answer('‚ö† –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π . . .', reply_markup=InlineKeyboardMarkup(inline_keyboard=[[__BACK_IN_MAIN_MENU__]]))
            await newsletter(message.chat.id, '‚ö† –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.', True, message.bot)


@router.message(F.document)
async def schedule_add_from_file(message: Message, state: FSMContext) -> None:
    if await CheckForAdmin(message.chat.id):
        if not message.document.thumbnail.file_size * 0.000001 <= 1:
            await message.answer('‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä 1Mb!',
                                 reply_markup=InlineKeyboardMarkup(inline_keyboard=[[__BACK_IN_MAIN_MENU__]]))
            return

        if message.document.mime_type != 'image/jpeg' and message.document.mime_type != 'image/png':
            await message.answer('‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç! –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ jpeg / jpg / png',
                                 reply_markup=InlineKeyboardMarkup(inline_keyboard=[[__BACK_IN_MAIN_MENU__]]))
            return

        file = await message.bot.get_file(message.document.file_id)
        downloaded_file = await message.bot.download_file(file.file_path)

        if message.caption != None:
            await message.answer('üëá –í—ã–±–µ—Ä–µ—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å –î/–ó', reply_markup=__UPDATE_HOMEWORK_AND_PHOTO__)
            await state.set_state(FormUpdate.select_lesson)


            await state.set_data({
                'homework': message.caption,
                'photo': downloaded_file.read()
                })
            
            downloaded_file.close()
        else:
            await rq.UpdateSchedule(message.chat.id, downloaded_file.read())

            await message.answer('‚ö† –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π . . .', reply_markup=InlineKeyboardMarkup(inline_keyboard=[[__BACK_IN_MAIN_MENU__]]))
            await newsletter(message.chat.id, '‚ö† –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.', True, message.bot)


@router.callback_query(F.data.startswith('schedule:recess'))
async def schedule_recess(callback: CallbackQuery):
    log.info(str(callback.message.chat.id), msg=f'Received \'[{callback.data}]\'')

    if datetime.isoweekday(datetime.now()) < 5 or datetime.isoweekday(datetime.now()) > 5:
        lessons = [
                {'start_time': '8.00', 'end_time': '8.45'},
                {'start_time': '8.55', 'end_time': '9.40'},
                {'start_time': '10.00', 'end_time': '10.45'},
                {'start_time': '11.05', 'end_time': '11.45'},
                {'start_time': '11.55', 'end_time': '12.35'},
                {'start_time': '12.45', 'end_time': '13.25'},
                {'start_time': '13.30', 'end_time': '14.10'},
                {'start_time': '14.15', 'end_time': '14.55'}
            ]
        
        text: str = ''
        i: int = 0

        for lesson in lessons:
            i += 1
            text += f'–£—Ä–æ–∫ {i}: {str(lesson['start_time']).replace('_', ':')} - {str(lesson['end_time']).replace('_', ':')}\n'
    elif datetime.isoweekday(datetime.now()) == 5:
        lessons = [
            {'start_time': '8.00', 'end_time': '8.45'},
            {'start_time': '8.55', 'end_time': '9.40'},
            {'start_time': '10.00', 'end_time': '10.45'},
            {'start_time': '11.05', 'end_time': '11.45'},
            {'start_time': '11.55', 'end_time': '12.35'},
            {'start_time': '12.45', 'end_time': '13.25'},
            {'start_time': '13.30', 'end_time': '14.10'},
            {'start_time': '14.15', 'end_time': '14.55'}
        ]

        text: str = '‚ö†Ô∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –ø—è—Ç–Ω–∏—Ü—É\n'
        i: int = 0

        for lesson in lessons:
            i += 1
            text += f'–£—Ä–æ–∫ {i}: {str(lesson['start_time']).replace('.', ':')} - {str(lesson['end_time']).replace('.', ':')}\n'

    current_time = float(strftime('%H.%M', localtime()))
    log.info(str(callback.message.chat.id), f'Current time: {current_time}')

    status, time_to_end = await GetTimeToLesson(lessons, current_time)

    if status == -1:
        await callback.message.edit_text(f'{text}\n\n–ë–æ–ª—å—à–µ —É—Ä–æ–∫–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç.',
                                         reply_markup=InlineKeyboardMarkup(inline_keyboard=[[__BACK_IN_MAIN_MENU__]]))
    else:
        if status == 0: status_text = '—É—Ä–æ–∫–∞'
        elif status == 1: status_text = '–ø–µ—Ä–µ–º–µ–Ω—ã'
        else: status_text = 'ERROR'

        await callback.message.edit_text(f'{text}\n\n–î–æ –∫–æ–Ω—Ü–∞ {status_text} –æ—Å—Ç–∞–ª–æ—Å—å {time_to_end:.0f} –º–∏–Ω—É—Ç', 
                                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[__BACK_IN_MAIN_MENU__]]))


@router.callback_query(F.data.startswith('schedule:nftadmins'))
async def schedule_delete_warn(callback: CallbackQuery) -> None:
    log.info(str(callback.message.chat.id), msg=f'Received \'[{callback.data}]\'')

    if not await CheckForAdmin(callback.message.chat.id):
        user = await rq.GetUser(callback.message.chat.id, callback.message.chat.id)

        await NotificationAdmins(
            f'‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username} [{user.user_id}] —É–≤–µ–¥–æ–º–∏–ª –≤–∞—Å –≤ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è',
            callback.message.bot,
            InlineKeyboardMarkup(inline_keyboard=[[__BACK_IN_MAIN_MENU__]])
        )

        await callback.message.answer('‚úÖ –û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ò–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞.',
                         reply_markup=InlineKeyboardMarkup(inline_keyboard=[[__BACK_IN_MAIN_MENU__]]))
    else: await RQReporter(callback)


@router.callback_query(F.data.startswith('schedule:delete_warn'))
async def schedule_delete_warn(callback: CallbackQuery) -> None:
    log.info(str(callback.message.chat.id), msg=f'Received \'[{callback.data}]\'')
    
    if await CheckForAdmin(callback.message.chat.id): await callback.message.answer(text='‚ö† –í—ã —É–≤–µ—Ä–µ–Ω—ã ?', reply_markup=__DELETE_SCHEDULE__)
    else: await RQReporter(callback)


@router.callback_query(F.data.startswith('schedule:delete'))
async def schedule_delete(callback: CallbackQuery) -> None:
    log.info(str(callback.message.chat.id), msg=f'Received \'[{callback.data}]\'')

    if await CheckForAdmin(callback.message.chat.id):
        if (await rq.GetSchedule(callback.message.chat.id)).photo != None:
            await rq.UpdateSchedule(callback.message.chat.id, None)
            await callback.message.edit_text('‚úÖ –£—Å–ø–µ—à–Ω–æ !', reply_markup=InlineKeyboardMarkup(inline_keyboard=[[__BACK_IN_MAIN_MENU__]]))
        else: await callback.answer(text='–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.', show_alert=True)
    else: RQReporter(callback)
